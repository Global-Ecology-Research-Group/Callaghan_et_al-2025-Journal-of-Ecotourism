birdwatcher_type=="Casual birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_local %>%
filter(characteristics=="monitoring",
birdwatcher_type=="Casual birder " |
birdwatcher_type=="Hardcore birder ")))
# Do you engage in birdwatching activities in-country?
(incountry_birdwatching <- survey %>% group_by(Q13) %>%
filter(complete.cases(Q13)) %>%
summarize(percentage=n()/nrow(survey %>%
filter(complete.cases(Q13)))*100))
ggplot(data=incountry_birdwatching, aes(x=Q13, y=percentage)) + geom_bar(stat="identity") +
theme_classic() + xlab("Do you engage in birdwatching activities in-country?") + ylab("Percentage")
# how often do you engage in local birdwatching activities per month?
(incountry_birdwatching_freq <- survey %>% group_by(Q15) %>%
mutate(Q15=factor(Q15, levels=c("More than 10 times a year",
"6-10 times a year",
"1-5 times a year",
"Less than once a year"))) %>%
filter(complete.cases(Q15)) %>%
summarize(percentage=n()/nrow(survey %>% filter(complete.cases(Q15)))*100))
ggplot(data=incountry_birdwatching_freq, aes(x=Q15, y=percentage)) + geom_bar(stat="identity") +
coord_flip() + theme_classic() + xlab("Frequency of birdwatching activities per month") + ylab("Percentage")
# what are the most important factors when visiting local birdwatching sites?
duplicates <- function(i) {
Q16survey <- survey %>% select(starts_with("Q16")) %>% filter_all(any_vars(!is.na(.)))
return(!any(duplicated(as.numeric(Q16survey[i,]))))
}
survey$correct_rankQ16 <- lapply(1:nrow(survey), duplicates)
Q16survey <- survey %>%
filter(correct_rankQ16==TRUE)
# filter out people who did not answer this question all together
answersQ16 <- survey %>% select(starts_with("Q16")) %>%
filter_all(any_vars(!is.na(.)))
# proportion of retained answers
nrow(Q16survey)/(nrow(survey)-(nrow(survey)-nrow(answersQ16)))
(rare_species <- Q16survey %>%
group_by(Q9) %>%
filter(complete.cases(Q16_1),
Q16_1 > 0,
Q16_1 <= 5,
complete.cases(Q9)) %>%
summarize(mean=mean(as.numeric(Q16_1)), sd=sd(as.numeric(Q16_1))) %>%
mutate(question="See rare species") %>%
rename(birdwatcher_type=Q9))
(life_list <- Q16survey %>%
group_by(Q9) %>%
filter(complete.cases(Q16_2),
Q16_2 > 0,
Q16_2 <= 5,
complete.cases(Q9)) %>%
summarize(mean=mean(as.numeric(Q16_2)), sd=sd(as.numeric(Q16_2))) %>%
mutate(question="Add to life list") %>%
rename(birdwatcher_type=Q9))
(monitoring <- Q16survey %>%
group_by(Q9) %>%
filter(complete.cases(Q16_3),
Q16_3 > 0,
Q16_3 <= 5,
complete.cases(Q9)) %>%
summarize(mean=mean(as.numeric(Q16_3)), sd=sd(as.numeric(Q16_3))) %>%
mutate(question="Species monitoring")  %>%
rename(birdwatcher_type=Q9))
(new_sites <- Q16survey %>%
group_by(Q9) %>%
filter(complete.cases(Q16_4),
Q16_4 > 0,
Q16_4 <= 5,
complete.cases(Q9)) %>%
summarize(mean=mean(as.numeric(Q16_4)), sd=sd(as.numeric(Q16_4))) %>%
mutate(question="Explore new sites") %>%
rename(birdwatcher_type=Q9))
(new_people <- Q16survey %>%
group_by(Q9) %>%
filter(complete.cases(Q16_5),
Q16_5 > 0,
Q16_5 <= 5,
complete.cases(Q9)) %>%
summarize(mean=mean(as.numeric(Q16_2), na.rm = TRUE), sd=sd(as.numeric(Q16_2), na.rm=TRUE)) %>%
mutate(question="Meet people")  %>%
rename(birdwatcher_type=Q9))
incountry_birdwatching_rank <- rbind(rare_species, life_list, monitoring, new_sites, new_people)
(incountry_rank <- ggplot(incountry_birdwatching_rank, aes(x = reorder(question, -mean), y = -mean, color = birdwatcher_type)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +  # Plot means
geom_errorbar(aes(ymin = -mean - sd, ymax = -mean + sd),  # Plot error bars
position = position_dodge(width = 0.5), width = 0.5, size=1.5) +
labs(title = "In-Country",
x = "", y = "Rank", color = "Birdwatcher Type") +
theme_classic() +
coord_flip() +  # Rotate x-axis labels for better readability
theme(text = element_text(size = 20)) +
guides(color = guide_legend(reverse = TRUE)) +
scale_color_manual(values = c("indianred2", "gold3", "steelblue")) +
scale_y_continuous(labels = c("Low Importance", "High Importance"),
breaks=c(-5,-1)) +
geom_hline(yintercept=-3, linetype="dashed"))
(incountry_rank <- ggplot(incountry_birdwatching_rank, aes(x = reorder(question, -mean), y = -mean, color = birdwatcher_type)) +
geom_point(position = position_dodge(width = 0.5), size = 3) +  # Plot means
geom_errorbar(aes(ymin = -mean - sd, ymax = -mean + sd),  # Plot error bars
position = position_dodge(width = 0.5), width = 0.5, size=1.5) +
labs(title = "Local",
x = "", y = "Rank", color = "Birdwatcher Type") +
theme_classic() +
coord_flip() +  # Rotate x-axis labels for better readability
theme(text = element_text(size = 20)) +
guides(color = guide_legend(reverse = TRUE)) +
scale_color_manual(values = c("indianred2", "gold3", "steelblue")) +
geom_hline(yintercept=-3, linetype="dashed") +
scale_y_continuous(labels = function(x) abs(x)))
# Run Wilcox test to see if birder category rankings are significantly different
# to start, create a data frame from all the data
(stats_incountry <- Q16survey %>%
dplyr::select(Q9, starts_with("Q16")) %>%
dplyr::rename("rare_species"=Q16_1,
"life_list"=Q16_2,
"monitoring"=Q16_3,
"new_sites"=Q16_4,
"new_people"=Q16_5) %>%
pivot_longer(cols=c("rare_species", "life_list", "monitoring",
"new_sites", "new_people"),
names_to="characteristics",
values_to="rank") %>%
filter(complete.cases(rank),
rank > 0 &
rank <= 5) %>%
mutate(birdwatcher_type=str_remove(Q9, "--.*")) %>%
dplyr::select(-Q9))
# make characteristics a factor
stats_incountry$characteristics <- as.factor(stats_incountry$characteristics)
# make birdwatcher_type a factor
stats_incountry$birdwatcher_type <- as.factor(stats_incountry$birdwatcher_type)
# make rank numeric
stats_incountry$rank <- as.numeric(stats_incountry$rank)
# do casual significantly value exploring new sites compared to the other birdwatchers types?
mean((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Casual birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Casual birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Enthusiastic birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Enthusiastic birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Hardcore birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Hardcore birder "))$rank)
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Hardcore birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Casual birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_sites",
birdwatcher_type=="Casual birder " |
birdwatcher_type=="Hardcore birder ")))
mean((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Casual birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Casual birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Enthusiastic birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Enthusiastic birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Hardcore birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Hardcore birder "))$rank)
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Hardcore birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Casual birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="rare_species",
birdwatcher_type=="Casual birder " |
birdwatcher_type=="Hardcore birder ")))
mean((stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Enthusiastic birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Hardcore birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Enthusiastic birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Hardcore birder "))$rank)
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Hardcore birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Casual birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="new_people",
birdwatcher_type=="Casual birder " |
birdwatcher_type=="Hardcore birder ")))
mean((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Casual birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Casual birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Enthusiastic birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Enthusiastic birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Hardcore birder "))$rank)
sd((stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Hardcore birder "))$rank)
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Hardcore birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Enthusiastic birder " |
birdwatcher_type=="Casual birder ")))
wilcox.test(rank ~ birdwatcher_type, data=(stats_incountry %>%
filter(characteristics=="life_list",
birdwatcher_type=="Casual birder " |
birdwatcher_type=="Hardcore birder ")))
mean((stats_incountry %>%
filter(characteristics=="monitoring",
birdwatcher_type=="Enthusiastic birder "))$rank)
mean((stats_incountry %>%
filter(characteristics=="monitoring",
birdwatcher_type=="Hardcore birder "))$rank)
library(tidyverse)
library(lubridate)
library(tidyr)
library(basemaps)
library(ggspatial)
library(sf)
library(scales)
# read in data
survey <- read_csv("Data/Final_Survey_Data.csv")
# the survey officially launched on Oct 26, 2023. All survey entries before this were part of pilot testing.
# remove pilot testing data.
survey <- survey %>%
mutate(StartDate = mdy_hm(survey$StartDate)) %>%
filter(StartDate >= mdy_hm("10/26/2023 00:00"),
Finished==TRUE)
# filter the data to US-only respondents - the results of the main analysis use data from just US birdwatchers. However, you can
# remove this code to get results from all birdwatchers who took the survey
survey <- survey %>%
filter(country=="United States of America")
# Do you engage in birdwatching activities internationally?
(international_birdwatching <- survey %>% group_by(Q20) %>%
filter(complete.cases(Q20)) %>%
summarize(count=n(), percentage=n()/nrow(survey %>%
filter(complete.cases(Q20)))*100))
ggplot(data=international_birdwatching, aes(x=Q20, y=percentage)) + geom_bar(stat="identity") +
theme_classic() + xlab("Do you engage in birdwatching activities internationally?") + ylab("Percentage")
# why have you not traveled internationally for birdwatching?
(no_int_bw <-survey %>% separate_rows(Q22, sep=",") %>%
group_by(Q22) %>%
filter(complete.cases(Q22)) %>%
summarize(percentage=n()/nrow(survey %>%
filter(complete.cases(Q22)))*100) %>%
mutate(Q22=factor(str_wrap(Q22, width=25), levels=c(unique(str_wrap(Q22, width=25))))) %>%
arrange(desc(percentage)))
ggplot(data=no_int_bw, aes(x=reorder(Q22, percentage), y=percentage)) +
geom_bar(stat="identity", fill="steelblue") +
theme_classic() + xlab("Reason for not traveling internationally") + ylab("Percentage") +
coord_flip() +
theme(text = element_text(size = 27))
# list of other reasons
unique(survey$Q22_9_TEXT)
# In the future would you like to travel internationally to engage in birdwatching activities?
(future_int_bw <- survey %>% group_by(Q23) %>%
filter(complete.cases(Q23)) %>%
summarize(percentage=n()/nrow(survey %>%
filter(complete.cases(Q23)))*100))
ggplot(data=future_int_bw, aes(x=Q23, y=percentage)) + geom_bar(stat="identity") +
theme_classic() + xlab("In the future, would you like to travel internationally to engage in birdwatching?") + ylab("Percentage")
# If you were to go birdwatching internationally, which three countries would you hope to visit first?
(top_country <- survey %>% group_by(Q24_1) %>%
filter(complete.cases(Q24_1)) %>%
dplyr::summarize(count=n(), percentage=n()/nrow(survey)*100) %>%
arrange(desc(percentage)) %>%
dplyr::rename(country=Q24_1))
(second_country <- survey %>% group_by(Q24_2) %>%
filter(complete.cases(Q24_2)) %>%
dplyr::summarize(count=n(), percentage=n()/nrow(survey)*100) %>%
arrange(desc(percentage)) %>%
dplyr::rename(country=Q24_2))
(third_country <- survey %>% group_by(Q24_3) %>%
filter(complete.cases(Q24_3)) %>%
dplyr::summarize(count=n(), percentage=n()/nrow(survey)*100) %>%
arrange(desc(percentage))%>%
dplyr::rename(country=Q24_3))
(top_country_gg <- ggplot(data=top_country, aes(x=reorder(country, percentage), y=percentage)) + geom_bar(stat="identity") +
theme_classic() + theme(axis.title.y=element_blank()) + ggtitle("Top Country") + coord_flip() +
ylab("Percentage"))
(second_country_gg <- ggplot(data=second_country, aes(x=reorder(country, percentage), y=percentage)) + geom_bar(stat="identity") +
theme_classic() + theme(axis.title.y=element_blank()) + ggtitle("Second Top Country") + coord_flip() +
ylab("Percentage"))
(third_country_gg <- ggplot(data=third_country, aes(x=reorder(country, percentage), y=percentage)) + geom_bar(stat="identity") +
theme_classic() + theme(axis.title.y=element_blank()) + ggtitle("Third Top Country") + coord_flip() +
ylab("Count"))
# map international travel destinations
all_countries <- rbind(third_country, top_country, second_country)
# we need to split trinidad and trabago into two separate columns
all_countries <- all_countries %>%
group_by(country) %>%
dplyr::summarise(count=sum(count)) %>%
mutate(country=case_when(country=="United States" ~ "USA",
country=="United Kingdom" ~ "UK",
country=="Galapagos" ~ "Ecuador",
country=="Equador" ~ "Ecuador",
country=="Great Britain" ~ "UK",
country=="Hawaii" ~ "USA",
country=="New Guinea" ~ "Papua New Guinea",
country=="Scotland" ~ "UK",
country=="England" ~ "UK",
TRUE ~ country),
country=as.character(country)) %>%
filter(!country %in% c("Africa", "Caribbean")) %>%
unnest(country)
# get map
world <- st_as_sf(maps::map('world', plot = FALSE, fill = TRUE))
# prepare for figure
world_with_counts <- world %>%
left_join(all_countries, by = c("ID" = "country"))
# plot the data
ggplot(data = world_with_counts) +
geom_sf(aes(fill = count), color = "white", size = 0.2) +
scale_fill_viridis_c(
name = "Birdwatchers",
trans="reverse",
direction=-1) +
theme_bw() +
labs(x=NULL, y=NULL) +
theme(panel.border=element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
axis.text=element_blank(),
text = element_text(size = 20)) +
ggtitle("Countries Non-Internationally Traveling Birdwatchers Desire to Visit")
library(tidyverse)
library(lubridate)
library(likert)
library(psych)
# read in data
survey <- read_csv("Data/Final_Survey_Data.csv")
# the survey officially launched on Oct 26, 2023. All survey entries before this were part of pilot testing.
# remove pilot testing data.
survey <- survey %>%
mutate(StartDate = mdy_hm(survey$StartDate)) %>%
filter(StartDate >= mdy_hm("10/26/2023 00:00"),
Finished==TRUE)
# filter the data to US-only respondents - the results of the main analysis use data from just US birdwatchers. However, you can
# remove this code to get results from all birdwatchers who took the survey
survey <- survey %>%
filter(country=="United States of America")
# format data for the likert function
likert_data <- survey %>%
filter(
complete.cases(Q36_1),
complete.cases(Q36_2),
complete.cases(Q36_3),
complete.cases(Q36_4),
complete.cases(Q36_5),
complete.cases(Q36_6),
complete.cases(Q36_7),
complete.cases(Q36_8),
complete.cases(Q36_9),
complete.cases(Q36_10),
complete.cases(Q36_11)
) %>%
rename(
'High bird diversity' = Q36_1,
'Opportunities to see rare birds' = Q36_2,
'Personal safety' = Q36_3,
'Cost' = Q36_4,
'Knowledgeable non-local tour guides' = Q36_5,
"Knowledgeable local tour guides" = Q36_6,
'Well planned itineraries' = Q36_7,
'Bird photography' = Q36_8,
'Bird blinds and feeders' = Q36_9,
'Focus on conservation, sustainability, and support for local communities' = Q36_10,
"Lodging infrastructure" = Q36_11
) %>%
dplyr::select(
'High bird diversity',
'Opportunities to see rare birds',
'Personal safety',
'Cost',
'Knowledgeable non-local tour guides',
"Knowledgeable local tour guides",
'Well planned itineraries',
'Bird photography',
'Bird blinds and feeders',
'Focus on conservation, sustainability, and support for local communities',
"Lodging infrastructure"
) %>%
mutate_all(~factor(., levels = c(
"Not at all important",
"Slightly important",
"Moderately important",
"Very important",
"Extremely important"
))) %>%
as.data.frame()
# run likert function
likert(likert_data)
# plot the data
plot(likert(likert_data), xaxt = "n") +
scale_fill_manual(values = c("indianred2", "lightsalmon", "lightgrey", "lightsteelblue", "steelblue"),
breaks = c("Not at all important", "Slightly important", "Moderately important", "Very important", "Extremely important")) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.justification = "left",
legend.margin = margin(l = -6, unit = "cm"),
text=element_text(size=13))
# start by transforming categorical data into numeric format
likert_scale <- c("Not at all important" = 1,
"Slightly important" = 2,
"Moderately important" = 3,
"Very important" = 4,
"Extremely important" = 5)
likert_data_numeric <- data.frame(lapply(likert_data, function(x) likert_scale[x]))
# now perform factor analysis. Start by determining the number of factors
# using a scree plot
parallel_results <- fa.parallel(likert_data_numeric, fa="fa")
parallel_results
# get eigen values
parallel_results$fa.values
# perform factor analysis on correlation matrix
cor_matrix <- cor(likert_data_numeric)
# perform factor analysis
factor_analysis_result <- factanal(covmat = cor_matrix, factors = 4, rotation = "varimax")
print(factor_analysis_result$loadings)
print(factor_analysis_result$correlation)
cor(factor_analysis_result$loadings)
# extract factor loadings
factor_loadings <- factor_analysis_result$loadings
# scale the original data
scaled_data <- scale(likert_data_numeric)
# calculate factor scores
factor_scores <- scaled_data %*% factor_loadings
# print factor scores
print(factor_scores)
# calculate squared multiple correlations (SMC)
SMC <- 1 - apply(cor_matrix, 2, function(x) sum(x^2))
# estimate commonalities
commonalities <- pmax(0, 1 - (1 - SMC), na.rm=TRUE)
# print commonalities
print(commonalities)
# extract factor loadings from the result
factor_loadings <- factor_analysis_result$loadings
# identify items associated with each factor based on non-zero loadings
factor_items <- lapply(1:ncol(factor_loadings), function(i) {
items <- which(abs(factor_loadings[, i]) > 0.3)
colnames(likert_data_numeric)[items]
})
# calculate Cronbach's alpha for each factor
alpha.pa1 = alpha(likert_data_numeric[,factor_items[[1]]])
print(alpha.pa1, digits = 3)
alpha.pa2 = alpha(likert_data_numeric[,factor_items[[2]]])
library(tidyverse)
library(lubridate)
# read in data
survey <- read_csv("Data/Final_Survey_Data.csv")
# the survey officially launched on Oct 26, 2023. All survey entries before this were part of pilot testing.
# remove pilot testing data.
survey <- survey %>%
mutate(StartDate = mdy_hm(survey$StartDate)) %>%
filter(StartDate >= mdy_hm("10/26/2023 00:00"),
Finished==TRUE)
# filter the data to US-only respondents - the results of the main analysis use data from just US birdwatchers. However, you can
# remove this code to get results from all birdwatchers who took the survey
survey <- survey %>%
filter(country=="United States of America")
# count of notes
complete.notes <- survey %>%
dplyr::filter(complete.cases(Q40)) %>%
dplyr::summarise(count=n())
# separate out the notes theme column
notes_sep <- survey %>%
dplyr::filter(complete.cases(Q40), complete.cases(Q40_Themes)) %>%
separate_rows(Q40_Themes, sep="; ")
# get percentage of each theme
(per_theme <- notes_sep %>%
group_by(Q40_Themes) %>%
dplyr::summarise(per=(n()/as.numeric(complete.notes))*100))
